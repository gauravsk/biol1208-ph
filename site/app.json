[{"name":"app.R","content":"# Load necessary libraries\nlibrary(shiny)\nlibrary(bslib)\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(agricolae)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(ggplot2)\n\n# Define UI for the app\nui <- fluidPage(\n  titlePanel(\"ANOVA Analysis For BIOL 1208\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file1\", \"Choose Excel File\", accept = c(\".xlsx\")),\n      uiOutput(\"selectUI\"),\n      actionButton(\"analyze\", \"Analyze\")\n    ),\n    mainPanel(\n      uiOutput(\"tableOutputUI\"),\n      plotOutput(\"barPlot\", width = \"50%\"),\n      plotOutput(\"scatterPlot\", width=\"50%\")\n    )\n  )\n)\n\n# Define server logic for the app\nserver <- function(input, output, session) {\n  # Reactive expression to read the uploaded file\n  data <- reactive({\n    req(input$file1)\n    read_excel(input$file1$datapath)\n  })\n\n  # Dynamic UI for selecting the treatment column\n  output$selectUI <- renderUI({\n    req(data())\n    # Filter the choices to only the specified treatments\n    valid_treatments <- intersect(names(data()), c(\"Temperature\", \"pH\", \"Catechol Volume\"))\n    selectInput(\"treatment\", \"Select Treatment Column\", choices = valid_treatments)\n  })\n\n  # Perform the analysis and display the final table and plot\n  observeEvent(input$analyze, {\n    req(data())\n    req(input$treatment)\n\n    # Get the data and selected treatment column\n    df <- data()\n    treatment <- input$treatment\n\n    # Perform ANOVA analysis\n    if (treatment == \"Catechol Volume\") {\n      formula <- as.formula(paste(\"`Benzoquinone Concentration (mM)` ~ `Catechol Volume`\"))\n    } else {\n      formula <- as.formula(paste(\"`Benzoquinone Concentration (mM)` ~\", treatment))\n    }\n    anova_result <- aov(formula, data = df)\n    anova_summary <- summary(anova_result)\n\n    # Calculate descriptive statistics\n    desc_stats <- df %>%\n      group_by(!!sym(treatment)) %>%\n      summarise(\n        Mean = round(mean(`Benzoquinone Concentration (mM)`), 3), # round the results to 3 decimal points\n        Standard_Deviation = round(sd(`Benzoquinone Concentration (mM)`), 3)\n      ) %>%\n      mutate(Treatment = as.character(!!sym(treatment)))  # Convert to character to display in table\n\n    # Extract ANOVA p-value\n    anova_p_value <- round(anova_summary[[1]][1, \"Pr(>F)\"], 3) # From anova summary exract probability column to get the p-value\n\n    # Perform post-hoc test using Tukey's HSD\n    tukey_result <- HSD.test(anova_result, treatment)\n    # The tukey_results contains following parameters\n    # #parameters, $means, $comparison and $groups. The $group has t test letter stored in it.\n    # Correctly extract Tukey HSD groups\n    tukey_groups <- data.frame(Treatment = rownames(tukey_result$groups), `t-Test Letters` = tukey_result$groups[, \"groups\"])\n    tukey_groups$Treatment <- as.character(tukey_groups$Treatment)  # Ensure Treatment is character\n\n    # Create a data frame for the final table\n    final_table <- desc_stats %>%\n      left_join(tukey_groups, by = \"Treatment\") %>%\n      mutate(`ANOVA p-Value` = ifelse(row_number() == 1, as.character(anova_p_value), \"\"))\n\n    # Render the final table\n    output$tableOutputUI <- renderUI({\n      tableHTML <- final_table %>%\n        select(Treatment, Mean, Standard_Deviation, `ANOVA p-Value`, `t.Test.Letters`) %>%\n        kbl() %>%\n        kable_styling(full_width = FALSE, bootstrap_options = c(\"striped\", \"hover\"), position = \"center\") %>%\n        collapse_rows(columns = 4, valign = \"top\") %>%\n        row_spec(0, bold = TRUE, background = \"white\", align=\"c\")#\"#D3D3D3\", align=\"c\")\n\n      HTML(tableHTML)\n    })\n\n    # Render the bar plot\n    output$barPlot <- renderPlot({\n      ggplot(desc_stats, aes(x = as.factor(Treatment), y = Mean)) +\n        geom_bar(stat = \"identity\", position = position_dodge(), fill = \"skyblue\") +\n        geom_errorbar(aes(ymin = Mean - Standard_Deviation, ymax = Mean + Standard_Deviation), width = 0.2) +\n        labs(title = paste(\"Mean Benzoquinone Concentration by\", treatment),\n             x = treatment,\n             y = \"Mean Benzoquinone Concentration (mM)\") +\n        theme_classic()\n    })\n    # Render the scatter plot\n    output$scatterPlot <- renderPlot({\n      data_group <- df %>%\n        group_by(!!sym(treatment), `Time (s)`) %>%\n        summarise(\n          mean = mean(`Benzoquinone Concentration (mM)`),\n          sd = sd(`Benzoquinone Concentration (mM)`)\n        )\n\n      ggplot(data_group, aes(x = `Time (s)`, y = mean, color = as.factor(!!sym(treatment)))) +\n        scale_color_discrete(name = treatment) +\n        geom_pointrange(aes(ymin = mean - sd, ymax = mean + sd)) +\n        geom_smooth(se = FALSE) +\n        labs(y = \"Mean Benzoquinone Concentration (mM)\") +\n        theme_classic()\n    })\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n","type":"text"}]
